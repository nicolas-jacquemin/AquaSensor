swagger: '2.0'
info:
  description: AquaSensor API Documentation
  version: 1.0.0
  title: AquaSensor API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
schemes:
  - http
  - https
basePath: /
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >-
      Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".
paths:
  /:
    get:
      summary: Template
      description: Response data template used in all api routes
      produces:
        - application/json
        - application/yaml
        - application/x-yaml
      tags:
        - Template
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              request:
                type: string
              data:
                type: object
              status:
                type: number
                example: 200
        '400':
          description: Bad Arguments
          schema:
            type: object
            properties:
              request:
                type: string
              errors:
                type: object
              status:
                type: number
                example: 400
        '500':
          description: Bad Arguments
          schema:
            type: object
            properties:
              request:
                type: string
              message:
                type: string
                example: Internal Server Error
              status:
                type: number
                example: 500
  /auth/login:
    post:
      summary: Login with your Account
      description: You must have valid and active account
      tags:
        - User
      parameters:
        - name: username
          in: formData
          required: true
          type: string
        - name: password
          in: formData
          required: true
          type: string
      produces:
        - application/json
        - application/yaml
        - application/x-yaml
      responses:
        '200':
          description: Login Success
          schema:
            $ref: '#/definitions/authToken'
        '401':
          description: Wrong username or password
        '400':
          description: Bad Parameters
        '500':
          $ref: '#/definitions/InternalError'
  /auth/register:
    post:
      summary: Register your Account
      description: Register a new Account
      tags:
        - User
      parameters:
        - name: username
          description: Must be unique
          in: formData
          required: true
          type: string
        - name: email
          in: formData
          required: true
          type: string
        - name: password
          in: formData
          required: true
          type: string
      produces:
        - application/json
        - application/yaml
        - application/x-yaml
      responses:
        '201':
          description: Registering success
          schema:
            $ref: '#/definitions/authToken'
        '401':
          description: Unauthorized to register, please contact an administrator
        '400':
          description: Bad Parameters
        '500':
          $ref: '#/definitions/InternalError'
  /auth/infos:
    get:
      summary: Get Account informations
      description: Get Account informations related to the Access Token given in authorization header
      tags:
        - User
      security:
        - Bearer: []
      produces:
        - application/json
        - application/yaml
        - application/x-yaml
      responses:
        '200':
          description: Account data
        '401':
          description: Unauthorized
        '500':
          $ref: '#/definitions/InternalError'
  /auth/update:
    put:
      summary: Update account information
      description: Set any information in the account associated by the Bearer token provided in Authorization header
      tags:
        - User
      security:
        - Bearer: []
      parameters:
        - name: user
          in: body
          required: true
          type: object
          properties:
            email:
              type: string
              required: false
            avatar:
              type: string
              required: false
            password:
              type: string
              required: false
      produces:
        - application/json
        - application/yaml
        - application/x-yaml
      responses:
        '202':
          description: Request has been executed without error but cannot guarantee results
        '401':
          description: Unauthorized
        '400':
          description: Bad Parameters
        '500':
          $ref: '#/definitions/InternalError'
  /auth/permission/{username}:
    put:
      summary: Add permission to a user
      description: "Require permission: 'admin'"
      tags:
        - User
      security:
        - Bearer: []
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: UserName
        - name: permission
          in: formData
          required: true
          type: string
      produces:
        - application/json
        - application/yaml
        - application/x-yaml
      responses:
        '202':
          description: Request has been executed without error but cannot guarantee results
        '401':
          description: Unauthorized
        '400':
          description: Bad Parameters
        '500':
          $ref: '#/definitions/InternalError'
    delete:
      summary: Delete permission to a user
      description: "Require permission: 'admin'"
      tags:
        - User
      security:
        - Bearer: []
      parameters:
        - name: username
          in: path
          required: true
          type: string
          description: UserName
        - name: user
          in: formData
          required: true
          type: string
      produces:
        - application/json
        - application/yaml
        - application/x-yaml
      responses:
        '202':
          description: Request has been executed without error but cannot guarantee results
        '401':
          description: Unauthorized
        '400':
          description: Bad Parameters
        '500':
          $ref: '#/definitions/InternalError'
  /auth/renewToken:
    post:
      summary: Renew Access Token with Renew Token
      description: 'Use your Renew Token to get a new Access Token<br/>Warning : Token cannot be renewed if the family has expired or has been destroyed earlier'
      tags:
        - User
      parameters:
        - name: refreshToken
          in: formData
          required: true
          type: string
      produces:
        - application/json
        - application/yaml
        - application/x-yaml
      responses:
        '200':
          description: 'Renewing success, got new Access Token and new Renew Token'
          schema:
            $ref: '#/definitions/authToken'
        '401':
          description: Token is not valid anymore
        '400':
          description: Bad Parameters
        '500':
          $ref: '#/definitions/InternalError'
  /auth/destroyTokenFamily:
    post:
      summary: Destroy actual token passed in Authorization header and all this token family
      description: "This will destroy all the token family including all actual Access and Refresh token.<br/>In others terms, this will logout all instances of this user using THIS token family!<br/>This will not logout others tokens related to the user's token."
      tags:
        - User
      security:
        - Bearer: []
      responses:
        '200':
          description: Success destroying token family, you're logout
        '401':
          description: Token is not valid
        '500':
          $ref: '#/definitions/InternalError'

definitions:
  authToken:
    type: object
    properties:
      token:
        type: string
      expUTC:
        type: string
      refreshToken:
        type: string
      refreshExpUTC:
        type: string
  InvalidResponse:
    type: object
    properties:
      message:
        type: string
  InternalError:
    description: Internal Server Error
